pipeline {
    agent {
        dockerfile {
            filename "etc/dockerfile.jenkins"
            args '--network=ci.network'
        }
    }

    environment {
        RND = "${BUILD_NUMBER}_${BRANCH_NAME}"
    }

    options {
        timeout(time: 1, unit: 'HOURS')
        timestamps()
        disableConcurrentBuilds()
    }

    stages {
    	stage ('Where Am I') {
            steps {
                sh "uname -a"
                sh "php -v"
                sh "composer -V"
            }
        }
	stage ('Set Env') {
            steps {
                sh "ln -fs ./.env.jenkins ./.env"
                sh "cat ./.env"
                sh "mkdir -p build"
            }
        }


        stage ('Prepare') {
            steps {
                sh "./bin/ci-scripts/do_run.sh before_install_test.sh"
            }
        }

        stage ('Create Database') {
            steps {
                sh "./bin/ci-scripts/do_run.sh set_db_host_test.sh # needed before create as it set .pgpass"
                sh "./bin/ci-scripts/do_run.sh create_database_test.sh"
                sh "./bin/ci-scripts/do_run.sh create_table_test.sh"

            }
        }

        stage('Parallel Install') {
            parallel {
                stage ('Install Test') {
                    steps {
                        sh "./bin/ci-scripts/do_run.sh install_test.sh"
                    }
                }

                stage ('Install Doc') {
                    steps {
                        sh "./bin/ci-scripts/do_run.sh install_doc.sh"
                    }
                }
            }
        }
        stage('Parallel Start') {
            parallel {
                stage ('Start Project') {
                    steps {
                        sh "./bin/ci-scripts/do_run.sh before_script_test.sh"
                    }
	        }

                stage ('Start Selenium') {
                    steps {
                        sh "./bin/ci-scripts/do_run.sh launch_selenium_test.sh"
                    }
	        }
            }
        }

        stage('Parallel Report') {
            parallel {
                stage ('Run Test') {
                    steps {
                        sh "./bin/ci-scripts/do_run.sh run_test.sh"
                        step([
                            $class: 'XUnitBuilder',
                            thresholds: [[$class: 'FailedThreshold', unstableThreshold: '1']],
                            tools: [[$class: 'JUnitType', pattern: 'build/junit.xml']]
                        ])
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'build/coverage', reportFiles: 'index.html', reportName: 'Coverage Report', reportTitles: ''])
                    }
	        }

                stage ('Run Doc') {
                    steps {
                        sh "./bin/ci-scripts/do_run.sh run_doc.sh"
                    }
                }


                stage('Check Style') {
                    steps {
                        sh 'phpcs -q --report=checkstyle --report-file=build/checkstyle.xml --standard=PSR2 --extensions=php --ignore=vendor ./ || exit 0'
                        checkstyle pattern: 'build/checkstyle.xml'
                    }
                }

                stage('Copy Paste Detection') {
                    steps {
                        sh 'phpcpd -q --exclude=vendor --log-pmd build/pmd-cpd.xml ./ || exit 0'
                        dry canRunOnFailed: true, pattern: 'build/pmd-cpd.xml'
                    }
                }

                stage('Mess Detection') {
                    steps {
                        sh 'phpmd ./ xml phpmd.xml.dist --exclude vendor --reportfile build/pmd.xml || exit 0'
                        pmd canRunOnFailed: true, pattern: 'build/pmd.xml'
                    }
                }

                stage('Collect Metrics') {
                    steps {
                        sh "phpmetrics --quiet --excluded-dirs=vendor --report-html=build/metrics.html ./"
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'build/', reportFiles: 'metrics.html', reportName: 'Metrics Report', reportTitles: ''])
                    }
                }
            }
        }

        stage ('Archive Gzip') {
            steps {
                sh 'tar -czf Platform_${BRANCH_NAME}.tgz ./*'
                archiveArtifacts artifacts: "Platform_${BRANCH_NAME}.tgz", fingerprint: true
            }
        }



    }



    post {
        always {
            cleanWs()

        }
    }

}
