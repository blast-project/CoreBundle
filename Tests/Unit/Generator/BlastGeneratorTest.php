<?php

/*
 * This file is part of the Sil Project.
 *
 * Copyright (C) 2015-2017 Libre Informatique
 *
 * This file is licenced under the GNU GPL v3.
 * For the full copyright and license information, please view the LICENSE.md
 * file that was distributed with this source code.
 */

namespace Blast\Bundle\CoreBundle\Tests\Unit\Generator;

use PHPUnit\Framework\TestCase;
use org\bovigo\vfs\vfsStream;
use Blast\Bundle\CoreBundle\Generator\BlastGenerator;

class BlastGeneratorTest extends TestCase
{
    /**
     * @var BlastGenerator
     */
    protected $object;

    private $blastFile;
    private $skeletonDirectory;
    private $modelManager;

    private $root;
    private $file;

    /**
     * @todo check if it is pertinent to cover __construct and do it(or not) in setUp
     * @covers \Blast\Bundle\CoreBundle\Generator\BlastGenerator::__construct
     */
    protected function setUp()
    {
        // As blast.yml is modified by the test
        $this->root = vfsStream::setup('BlastTestRessources');
        $this->file = vfsStream::newFile('blast.yml');
        $this->root->addChild($this->file);

        /*
         *   @todo test with and/or without original content
         */
        $this->file->setContent(file_get_contents('src/Resources/config/blast.yml'));

        $this->blastFile = vfsStream::url('BlastTestRessources/blast.yml');

        /*
         * @todo check if it should be tested with other skeleton
         */

        $this->skeletonDirectory = 'src/Resources/skeleton';

        // Sonata Model Manager is used to launch getExportFields
        // from the method addResource in Blast\Bundle\CoreBundle\Generator\BlastGenerator
        // $managerType =  'sonata.admin.manager.orm';
        $modelManagerMock = $this->getMockForAbstractClass('Sonata\AdminBundle\Model\ModelManagerInterface');

        $map = [
            ['Model', ['foo', 'bar', 'not_an_id']],
            ['Ledom', ['id', 'zoo', 'rab']],
         ];
        $modelManagerMock
             ->expects($this->any())
             ->method('getExportFields')
             ->will($this->returnValueMap($map));

        $this->modelManager = $modelManagerMock;
        $this->object = new BlastGenerator(
             $this->blastFile,
             $this->modelManager,
             $this->skeletonDirectory
         );
    }

    protected function tearDown()
    {
    }

    /**
     * @covers \Blast\Bundle\CoreBundle\Generator\BlastGenerator::addResource
     */
    public function testAddResource()
    {
        $this->assertFileExists($this->blastFile);

        $this->object->AddResource('Model');
        $this->object->AddResource('Ledom');

        $content = $this->file->getContent();

        // Model
        $this->assertContains('blast', $content);
        $this->assertContains('foo: ~', $content);
        $this->assertContains('Model:', $content);

        // Ledom
        $this->assertContains('Ledom:', $content);

        /*
         * @todo should be test for '#id: ~' when content is generated by sequence like ORM\GeneratedValue(strategy="AUTO")
         */
        $this->assertContains('id: ~', $content);

        // echo  $this->file->getContent();
    }
}
